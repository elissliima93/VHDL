-- somador parametrizado

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- Entidade do somador parametrizado
entity carry_lookahead_adder is
    generic (
        N : integer := 4  -- Quantidade de bits (parametrizável)
    );
    port (
        A    : in  std_logic_vector(N-1 downto 0); -- Entrada A
        B    : in  std_logic_vector(N-1 downto 0); -- Entrada B
        Cin  : in  std_logic;                      -- Carry de entrada
        Sum  : out std_logic_vector(N-1 downto 0); -- Soma (resultado)
        Cout : out std_logic                       -- Carry de saída
    );
end carry_lookahead_adder;

-- Arquitetura comportamental do somador
architecture behavioral of carry_lookahead_adder is
    signal P, G : std_logic_vector(N-1 downto 0); -- Sinais de propagação e geração
    signal C    : std_logic_vector(N downto 0);   -- Carries intermediários
begin
    C(0) <= Cin; -- Inicializa carry com o valor de entrada

    process (A, B, Cin)
    begin
        -- Calcula os sinais de propagação (P = A XOR B) e geração (G = A AND B)
        for i in 0 to N-1 loop
            P(i) := A(i) xor B(i);
            G(i) := A(i) and B(i);
        end loop;

        -- Calcula os carries internos usando lógica look-ahead
        for i in 1 to N loop
            C(i) := G(i-1) or (P(i-1) and C(i-1));
        end loop;

        -- Calcula a soma final (Sum = P XOR Carry)
        for i in 0 to N-1 loop
            Sum(i) <= P(i) xor C(i);
        end loop;

        -- Último carry de saída
        Cout <= C(N);
    end process;
end behavioral;
